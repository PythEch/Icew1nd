message DeviceUdids {
	required string psid = 1;
	repeated bytes udids = 2;
	optional bool usuallyFalse = 3;
}

message Device {
    required bytes udid = 1;
    required int64 fullSize = 2;
    repeated Backup backup = 3;
    required DeviceInfo device = 4;
    required int64 time = 5;
}

message Backup {
	required int32 snapshotID = 1;
	required int64 size = 2;
	required int64 time1 = 3;
	required BackupInfo info = 5;
	required int64 time2 = 6;
}

message BackupInfo {
    required string name = 1;
    required string firmware = 2;
    required string build = 3;
    required int32 usually2_1 = 4;
    required bytes idk = 5;
    required int32 usually2_2 = 6;
	required int32 usually1 = 7;
}

message DeviceInfo {
	required string shortName = 1;
    required string realName = 2;
    required string serial = 3;
    required string color = 4;
    required string model = 5;
    required string prettyName = 6;
    optional string idk = 7;
}

message Keys {
	repeated Key keySet = 1;
}

message Key {
	required int32 index = 1;
	required string data = 2;
}

message GetFiles { //POST this to getFiles, get an AuthChunk in response
	required bytes hash = 1;
}

message FileAuth { //POST this to "authorizeGet"
	repeated AuthChunk main = 1;
}

message AuthChunk { //Also response of getFiles
	required bytes checksum = 1; //First in header
	required string authToken = 2; //Second in header
}

message AuthorizeGet { //Response from "authorizeGet"
	required FileChecksumStorageHostChunkLists data = 1;
	required int32 verbosity = 4; //Usually 2
}

message FileChecksumStorageHostChunkLists {
	repeated StorageHostChunkList storage_host_chunk_list = 1;
	repeated FileChecksumChunkReferences file_checksum_chunk_ref_list = 2;
}

message StorageHostChunkList { //Contains info needed for downloading chunks
	required Request host_info = 1;
	repeated ChunkInfo chunk_info = 2;
	required string storage_container_key = 3;
	required string storage_container_authorization_token = 4;
}

message ChunkInfo {
	required bytes chunk_checksum = 1;
	//optional EncryptionKey chunk_encryption_key = 2;
	optional bytes chunk_encryption_key = 2;
	required uint32 chunk_length = 3;
}


//message EncryptionKey {
//	required bytes hex1 = 0;
//	required int32 unknown1 = 7;
//	required bytes hex2 = 13;
//}

message FileChecksumChunkReferences {
	required bytes file_checksum = 1; //First in header; Same as first in getFiles Response
	repeated ChunkReference chunk_references = 2;
}

message ChunkReference {
	required uint64 container_index = 1;
	required uint64 chunk_index = 2; 
}

message Request { //This is the response of autorizeGet
	required string hostname = 1;
	required uint32 port = 2;
	required string method = 3;
	required string uri = 4;
	required string transport_protocol = 5; //"HTTP"
	required string transport_protocol_version = 6; //1.1
	required string scheme = 7; //"http"
	repeated Header headers = 8;
	optional string provider = 9; //s3_us_ore
}

message FileAttribute {
    required string name = 1;
    required bytes value = 2;
}

message FileInfo {
    optional int32 unknown1 = 1;
	optional string unknown2 = 2;
	optional bytes unknown3 = 3;
	required int32 unknown4 = 4;
	required int32 unknown5 = 5;
	required int32 user = 6;
	required int32 group = 7;
	required int64 mtime = 8;
	required int64 atime = 9;
	required int64 ctime = 10;
	required int32 protection = 12;
	repeated FileAttribute attributes = 13;
	optional int32 unknown6 = 14;
	optional int32 unknown7 = 15;
}

message File {
    required bytes fileName = 1;
	required string domain = 2;
	required string path = 3;
	optional bytes altFileName = 4;
	required int32 fileSize = 5;
	optional FileInfo info = 6;
	required int64 date = 7;
	required bool bool = 9;
}

message Header { //This is a header to be used when downloading chunks
	required string key = 1;
	required string value = 2;
}